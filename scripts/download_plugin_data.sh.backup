#!/usr/bin/env bash
set -euo pipefail

#
# VEP Plugin Data Downloader (Free, Approved Plugins Version)
# Downloads and processes required data files for a curated list of VEP plugins.
# - Skips already completed files.
# - Uses resumable downloads.
# - Processes dbNSFP last due to its size and complexity.
#

# --- Colors for output --------------------------------------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# --- Directory Setup ----------------------------------------------------------
# Use provided VEP_PLUGINS_DIR or default to a standard location
VEP_PLUGINS_DIR="${VEP_PLUGINS_DIR:-$HOME/.vep/Plugins}"
mkdir -p "<span class="math-inline">VEP\_PLUGINS\_DIR"
\# \-\-\- Logging \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
log\_info\(\)    \{ echo \-e "</span>{BLUE}[INFO]${NC} <span class="math-inline">1"; \}
log\_success\(\) \{ echo \-e "</span>{GREEN}[SUCCESS]${NC} <span class="math-inline">1"; \}
log\_warning\(\) \{ echo \-e "</span>{YELLOW}[WARNING]${NC} <span class="math-inline">1"; \}
log\_error\(\)   \{ echo \-e "</span>{RED}[ERROR]${NC} $1"; }

# --- Download & Indexing Helpers --------------------------------------------------
download_file() {
    local url="$1"
    local output_path="$2"
    local desc="$3"

    if [[ -f "$output_path" ]]; then
        log_success "$desc data file already exists: $(basename "$output_path")"
        return 0
    fi

    log_info "Downloading $desc..."
    log_info "URL: $url -> $output_path"

    # Use wget with -c (continue) or curl with -C - (continue) for resumable downloads
    if command -v wget >/dev/null 2>&1; then
        wget -c -O "$output_path.part" "$url"
    elif command -v curl >/dev/null 2>&1; then
        curl -L -C - -o "$output_path.part" "$url"
    else
        log_error "Neither wget nor curl is available. Cannot download files."
        return 1
    fi

    # If download succeeded, rename partial file to final file
    if [[ $? -eq 0 ]]; then
        mv "$output_path.part" "$output_path"
        log_success "$desc downloaded successfully."
        return 0
    else
        log_error "Failed to download $
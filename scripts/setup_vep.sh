#!/usr/bin/env bash
set -euo pipefail

#
# VEP Setup Script for Annotation Engine
# Uses Docker for maximum compatibility and reproducibility
#

# --- Configuration ---
VEP_VERSION="114"
VEP_ASSEMBLY="GRCh38"
SPECIES="homo_sapiens"

# --- Colors for output ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --- Directory Setup ---
REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || echo "$(pwd)")"
REFS_DIR="$REPO_ROOT/.refs"
VEP_DIR="$REFS_DIR/vep"
VEP_CACHE_DIR="$VEP_DIR/cache"
VEP_PLUGINS_DIR="$VEP_DIR/plugins"

# Create directory structure
mkdir -p "$VEP_CACHE_DIR"
mkdir -p "$VEP_PLUGINS_DIR"

# --- Logging Functions ---
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# --- Check Docker Installation ---
check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed!"
        log_info "Please install Docker from: https://docs.docker.com/get-docker/"
        return 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running!"
        log_info "Please start Docker and try again."
        return 1
    fi
    
    log_success "Docker is installed and running"
    return 0
}

# --- Pull VEP Docker Image ---
pull_vep_image() {
    local image="ensemblorg/ensembl-vep:release_${VEP_VERSION}"
    
    log_info "Pulling VEP Docker image: $image"
    if docker pull "$image"; then
        log_success "VEP Docker image pulled successfully"
        return 0
    else
        log_error "Failed to pull VEP Docker image"
        return 1
    fi
}

# --- Download VEP Cache and FASTA ---
download_vep_cache() {
    local image="ensemblorg/ensembl-vep:release_${VEP_VERSION}"
    
    log_info "Checking for existing VEP cache..."
    if [[ -d "$VEP_CACHE_DIR/${SPECIES}/${VEP_VERSION}_${VEP_ASSEMBLY}" ]]; then
        log_info "VEP cache already exists. Use --force to re-download."
        return 0
    fi
    
    log_info "Downloading VEP cache for $SPECIES $VEP_ASSEMBLY (this will take a while)..."
    log_warning "This will download ~15-20GB of data"
    
    # Run INSTALL.pl inside Docker container to download cache
    if docker run --rm \
        -v "$VEP_CACHE_DIR:/opt/vep/.vep" \
        "$image" \
        perl /opt/vep/src/ensembl-vep/INSTALL.pl \
        --AUTO c \
        --SPECIES "$SPECIES" \
        --ASSEMBLY "$VEP_ASSEMBLY" \
        --CACHEDIR /opt/vep/.vep \
        --NO_UPDATE; then
        log_success "VEP cache downloaded successfully"
        return 0
    else
        log_error "Failed to download VEP cache"
        return 1
    fi
}

# --- Download Additional Plugins ---
download_plugins() {
    log_info "Downloading VEP plugins repository..."
    
    if [[ -d "$VEP_PLUGINS_DIR/.git" ]]; then
        log_info "Updating existing plugins..."
        cd "$VEP_PLUGINS_DIR"
        git fetch
        git checkout "release/${VEP_VERSION}"
    else
        log_info "Cloning VEP plugins repository..."
        git clone https://github.com/Ensembl/VEP_plugins.git "$VEP_PLUGINS_DIR"
        cd "$VEP_PLUGINS_DIR"
        git checkout "release/${VEP_VERSION}"
    fi
    
    cd "$REPO_ROOT"
    log_success "VEP plugins downloaded"
    return 0
}

# --- Create VEP Wrapper Script ---
create_vep_wrapper() {
    local wrapper_path="$REPO_ROOT/scripts/vep"
    
    log_info "Creating VEP wrapper script..."
    
    cat > "$wrapper_path" << 'EOF'
#!/usr/bin/env bash
set -euo pipefail

# VEP Docker Wrapper Script
# Auto-generated by setup_vep.sh

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
REFS_DIR="$REPO_ROOT/.refs"
VEP_CACHE_DIR="$REFS_DIR/vep/cache"
VEP_PLUGINS_DIR="$REFS_DIR/vep/plugins"
VEP_VERSION="114"

# Convert paths to absolute paths for Docker mounting
INPUT_DIR="$(pwd)"
OUTPUT_DIR="$(pwd)"

# Handle input file path
if [[ $# -gt 0 ]]; then
    for arg in "$@"; do
        if [[ -f "$arg" ]]; then
            INPUT_FILE="$(cd "$(dirname "$arg")" && pwd)/$(basename "$arg")"
            INPUT_DIR="$(dirname "$INPUT_FILE")"
            break
        fi
    done
fi

# Run VEP in Docker
docker run --rm \
    -v "$VEP_CACHE_DIR:/opt/vep/.vep:ro" \
    -v "$VEP_PLUGINS_DIR:/opt/vep/plugins:ro" \
    -v "$INPUT_DIR:/data" \
    -v "$OUTPUT_DIR:/output" \
    -w /data \
    ensemblorg/ensembl-vep:release_${VEP_VERSION} \
    vep \
    --cache \
    --offline \
    --dir_cache /opt/vep/.vep \
    --dir_plugins /opt/vep/plugins \
    --fasta /opt/vep/.vep/homo_sapiens/114_GRCh38/Homo_sapiens.GRCh38.dna.toplevel.fa.gz \
    "$@"
EOF

    chmod +x "$wrapper_path"
    log_success "VEP wrapper script created at: $wrapper_path"
    log_info "You can now run VEP using: $wrapper_path"
    return 0
}

# --- Main Setup Function ---
setup_vep() {
    log_info "Starting VEP setup using Docker..."
    
    # Check Docker
    if ! check_docker; then
        return 1
    fi
    
    # Pull VEP image
    if ! pull_vep_image; then
        return 1
    fi
    
    # Download cache
    if ! download_vep_cache; then
        return 1
    fi
    
    # Download plugins
    if ! download_plugins; then
        return 1
    fi
    
    # Create wrapper
    if ! create_vep_wrapper; then
        return 1
    fi
    
    log_success "VEP setup completed successfully!"
    echo ""
    log_info "VEP Configuration:"
    log_info "  Version: $VEP_VERSION"
    log_info "  Assembly: $VEP_ASSEMBLY"
    log_info "  Docker image: ensemblorg/ensembl-vep:release_${VEP_VERSION}"
    log_info "  Cache location: $VEP_CACHE_DIR"
    log_info "  Plugins location: $VEP_PLUGINS_DIR"
    log_info "  Wrapper script: $REPO_ROOT/scripts/vep"
    echo ""
    log_info "Plugin Information:"
    log_info "  - Many plugins are included in the Docker image"
    log_info "  - Some plugins require additional data files (e.g., dbNSFP)"
    log_info "  - Plugin data files must be downloaded separately"
    echo ""
    log_info "Example usage:"
    log_info "  scripts/vep -i input.vcf -o output.json --json"
    log_info "  scripts/vep -i input.vcf -o output.json --json --plugin LoF"
    log_info "  scripts/vep -i input.vcf -o output.json --json --plugin dbNSFP,/path/to/dbNSFP.gz,SIFT_score"
    
    return 0
}

# --- Show Usage ---
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "This script sets up VEP using Docker for maximum compatibility."
    echo ""
    echo "Options:"
    echo "  --force    Force re-download of cache data"
    echo "  --help     Show this help message"
}

# --- Main Execution ---
main() {
    local force_download=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                force_download=true
                shift
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Run setup
    setup_vep
}

# Run main function
main "$@"
version: '3.8'

services:
  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: arti-api
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./temp:/app/temp
      - ./.refs:/app/.refs:ro
      - ./src:/app/src
    environment:
      - DATABASE_URL=postgresql://arti:arti@postgres/arti_db
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
    ports:
      - "8000:8000"
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # RQ Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: arti-worker
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./temp:/app/temp
      - ./.refs:/app/.refs:ro
      - ./src:/app/src
    environment:
      - DATABASE_URL=postgresql://arti:arti@postgres/arti_db
      - REDIS_URL=redis://redis:6379/0
    command: ["python", "-m", "src.api.tasks"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: arti-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - api
    volumes:
      - ./frontend:/app
      - /app/node_modules

  postgres:
    image: postgres:15
    container_name: annotation-postgres
    environment:
      POSTGRES_DB: arti_db
      POSTGRES_USER: arti
      POSTGRES_PASSWORD: arti
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arti"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: annotation-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # VEP container for variant annotation
  vep:
    image: ensemblorg/ensembl-vep:latest
    container_name: annotation-vep
    volumes:
      - ./data:/data
      - ./.refs:/refs
    command: ["tail", "-f", "/dev/null"]  # Keep running for on-demand use

  # Optional: Jupyter for analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: annotation-jupyter
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./.refs:/app/.refs
    ports:
      - "8888:8888"
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]
    environment:
      - JUPYTER_ENABLE_LAB=yes

volumes:
  postgres_data:
  redis_data: